window.preact = (function (m) { 'use strict'; var o = function (a) { return 'function' === typeof a }; var q = function (a) { return 'string' === typeof a }; var r = function (a) { var b = typeof a; return ('function' !== b && 'object' !== b) }; var hasOwnProperty = function (a, b) { return Object.prototype.hasOwnProperty.call(a, b) }; var u = function (a, b) { for (var i in b) { if (hasOwnProperty(b, i)) { a[i] = b[i] } } return a }; var w = function (a) { var b = {}; for (var i in a) { b[i] = a[i] } return b }; var y = function (a) { for (var b in a) { delete a[b] } }; var z = function (a, b) { b = b || {}; return function (k) { return b[k] ? b[k] : b[k] = a(k) } }; var A = z(function (a) { return a.toLowerCase() }); var B = z(function (a) { return a.toUpperCase() }); var C = function (a, b) { var c = b.split('.'); for (var i = 0, len = c.length; i < len && a; i++) { a = a[c[i]] } return a }; var D = function (d, e, a, b, c) { return d[e] ? d[e](a, b, c) : void (0) }; var E = function (x) { return x == null }; var G = function (x) { return x === false || x == null }; var H = {}; var I = ''; var J = 'textContent' in document ? 'textContent' : 'nodeValue'; var K = typeof m.Symbol !== 'undefined' ? m.Symbol.for('reactattr') : '__reactattr_'; var L = {};['boxFlex', 'boxFlexGroup', 'columnCount', 'fillOpacity', 'flex', 'flexGrow', 'flexPositive', 'flexShrink', 'flexNegative', 'fontWeight', 'lineClamp', 'lineHeight', 'opacity', 'order', 'orphans', 'strokeOpacity', 'widows', 'zIndex', 'zoom'].forEach(function (a) { L[a] = true }); var M = {}; var N = function (c, a, b) { return D(M, c, a, b) }; var O = (function () { var b = m.setImmediate, tickObserver = m.MutationObserver; if (b) { return b.bind(m) } else if (tickObserver) { var c = document.createTextNode('react'), queue = [], bool = false, f = null, callback = function () { while (f = queue.shift()) { f() } }; new tickObserver(callback).observe(c, { characterData: true }); return function (a) { queue.push(a); bool = !bool; c.data = bool } } else { return function (a) { setTimeout(a, 4) } } })(); var P = function (a) { var p = a.parentNode; if (p) { p.removeChild(a) } }; var Q = function (a) { return a.nodeType }; var R = function (a) { return a[K] || (a[K] = {}) }; var S = z(function (s) { return s.replace(/([A-Z])/g, '-$1').toLowerCase() }); var T = function (a) { var b = ''; for (var p in a) { var c = a[p]; if (!E(c)) { b += (S(p) + ':' + c + (typeof c === 'number' && !L[p] ? 'px;' : ';')) } } return b }; var U = function (a) { var b = ''; for (var c in a) { if (a[c]) { b += (b ? (' ' + c) : c) } } return b }; var V = function (a, b, c) { var v = a[b]; if (v && !q(v)) { a[b] = c(v) } }; var W = function (a, b) { if (b === 'class') { return a.className } else if (b === 'style') { return a.style.cssText } else if (b !== 'type' && b in a) { return a[b] } else { return R(a)[b] } }; var X = z(function (t) { return t.replace(/^on/i, '').toLowerCase() }); var Y = function (a) { var b = this._listeners[X(a.type)]; return b ? b.call(this, N('event', a) || a) : void (0) }; var Z = function (a, b, c) { if (b.substring(0, 2) === 'on') { var d = X(b), l = a._listeners || (a._listeners = {}), act = c ? 'add' : 'remove'; a[act + 'EventListener'](d, Y); l[d] = c } else { var e = typeof c; if (G(c)) { a.removeAttribute(b) } else if (r(e)) { a.setAttribute(b, c) } } }; var ba = function (a, b, c) { if (b === 'class') { a.className = c || '' } else if (b === 'style') { a.style.cssText = c || '' } else if (b === 'dangerouslySetInnerHTML') { if (c && c.__html) { a.innerHTML = c.__html } } else if (b === 'key' || (b !== 'type' && b in a)) { a[b] = c; if (G(c)) { a.removeAttribute(b) } } else { Z(a, b, c) } R(a)[b] = c }; var bb = function (a) { var b = {}, len = a.length; while (len--) { var c = a[len]; b[c.name] = c.value } return b }; var bc = function (a) { var b = a.attributes; return (b && b.getNamedItem) ? bb(b) : b }; var bd = function (a) { return a[K] ? a[K] : (a[K] = bc(a)) }; var be = { renderSync: true }; u(M, { syncComponentUpdates: false, vnode: function (n) { var a = n.attributes; if (!o(n.nodeName) && a) { var p = a.className; if (p) { a['class'] = p; delete a.className } if (a['class']) { V(a, 'class', U) } if (a.style) { V(a, 'style', T) } } } }); function VNode(a, b, c) { this.nodeName = a; this.attributes = b; this.children = c } var bf = new Array(1); function h(a, b) { var c = arguments.length, lastSimple = false, children = void (0), arr; if (b) { delete b.children } else { b = void (0) } for (var i = 2; i < c; i++) { var d = arguments[i]; if (!G(d)) { if (d.join) { arr = d } else { bf[0] = d; arr = bf } for (var j = 0, arrlen = arr.length; j < arrlen; j++) { var e = arr[j]; if (!G(e)) { var f = r(e); if (f) { e = String(e) } if (!children) { children = [] } if (f && lastSimple) { children[children.length - 1] += e } else { children.push(e) } lastSimple = f } } } } var p = new VNode(a, b, children); N('vnode', p); return p } function isFunctionalComponent(a) { var b = a.nodeName; return o(b) && !b.prototype.render } function isComponent(a) { var b = a.nodeName; return o(b) && o(b.prototype.render) } function isSameNodeType(a, b) { var c = b.nodeName; if (q(c)) { return c === A(a.nodeName) } else if (q(b)) { return 3 === Q(a) } else if (isComponent(b)) { return c.maybeTag === A(a.nodeName) } else { return true } } function diffAttributes(a, b) { var c = bd(a) || H, attrs = b.attributes || H, name, value; for (name in c) { if (!hasOwnProperty(attrs, name)) { ba(a, name, null) } } if (attrs !== H) { for (name in attrs) { value = attrs[name]; if (!E(value) && value != W(a, name)) { ba(a, name, value) } } } } function getNodeProps(a) { var b = a.nodeName.defaultProps, props = w(a.attributes), c = a.children; if (c) { props.children = c } if (b) { for (var i in b) { if (!hasOwnProperty(props, i)) { props[i] = b[i] } } } return props } function buildFunctionalComponent(a, b) { do { a = a.nodeName(getNodeProps(a), b || H) || I } while (isFunctionalComponent(a)); return a } var bg = {}; function cleanNode(a) { if (Q(a) === 1) { a._component = a._componentConstructor = a._ancestor = a._ancestorConstructor = null } } function collectNode(a) { var b = bd(a), name = B(a.nodeName), list = bg[name] || (bg[name] = []); D(b, 'ref', null); P(a); cleanNode(a); list.push(a) } function createNode(a) { var b = B(a), list = bg[b] || (bg[b] = []), node = list.length ? list.pop() : document.createElement(a); R(node); return node } var bh = {}; function collectComponent(a) { var b = a.constructor.name, list = bh[b] || (bh[b] = []); a.clean(); list.push(a) } function createComponent(a, b, d) { var e = bh[a.name] || (bh[a.name] = []); if (e.length) { var c = e.pop(), state; c.props = b; d ? (c.context = d) : y(c.context); state = D(c, 'getInitialState'); state ? (c.state = state) : y(c.state); return c } else { return new a(b, d) } } function removeOrphanedChildren(a) { var b = a.length; while (b--) { var c = a[b]; if (c) { recollectNodeTree(c) } } } function recollectNodeTree(a) { var b = a._ancestor; if (b) { unmountComponent(b, true) } else { if (Q(a) === 1) { collectNode(a); removeOrphanedChildren(a.childNodes) } else { P(a) } } } function unmountComponent(a, b) { D(a, '__ref', null); D(a, 'componentWillUnmount'); var c = a._component; if (c) { unmountComponent(c, b) } else { var d = a.base; if (d) { if (b) { collectNode(d); removeOrphanedChildren(d.childNodes) } else { cleanNode(d) } } } collectComponent(a); D(a, 'componentDidUnmount'); a._isMounted = true } function createNodeToVNode(a) { if (r(a)) { return document.createTextNode(String(a)) } else if (q(a.nodeName)) { return document.createElement(a.nodeName) } else if (isComponent(a)) { return document.createElement(a.nodeName.maybeTag) } else { return document.createElement('span') } } function createLinkedState(c, d, e) { var f = d.split('.'), len = f.length, p0 = f[0]; return function (a) { var b = {}, state = c.state, stateRef = state, node = this, value; if (q(e)) { value = C(a, e); if (E(value) && (node = node._component)) { value = C(node, e) } } else { value = (node.nodeName + node.type).match(/^input(checkbox|radio)$/i) ? node.checked : node.value } if (o(value)) { value = value.call(node) } if (len > 1) { for (var i = 0; i < len - 1; i++) { stateRef = stateRef[f[i]] || (stateRef[f[i]] = {}) } stateRef[f[i]] = value; value = state[p0] } b[p0] = value; c.setState(b) } } function updateComponentBaseUp(a, b) { var c = A(b.nodeName); while (a) { a.base = b; a.constructor.maybeTag = c; a = a._parentComponent } } function setComponentProps(a, b, c, e) { a.__ref = b.ref; a.__key = b.key; delete b.ref; delete b.key; if (e) { if (!a.prevContext) { a.prevContext = a.context } a.context = e } var d = a._disableRendering; a._disableRendering = false; D(a, 'componentWillReceiveProps', b, a.context); a._disableRendering = d; if (!a.prevProps) { a.prevProps = a.props } a.props = b; if ((c && c.renderSync) || M.syncComponentUpdates) { renderComponent(a) } else { triggerComponentRender(a) } D(a, '__ref', a) } function renderComponent(a) { if (a._disableRendering) { return null } var b = false, props = a.props, state = a.state, context = a.context, previousProps = a.prevProps, previousState = a.prevState, previousContext = a.prevContext, isUpdate = a._isMounted; if (isUpdate) { a.props = previousProps; a.state = previousState; a.context = previousContext; if (D(a, 'shouldComponentUpdate', props, state, context) === false) { b = true } else { D(a, 'componentWillUpdate', props, state, context) } a.props = props; a.state = state; a.context = context } else { D(a, 'componentWillMount') } a.prevProps = a.prevState = a.prevContext = null; a._dirty = false; if (!b) { var c = D(a, 'render', props, state, context), inst = a._component, cbase = a.base; if (isFunctionalComponent(c)) { c = buildFunctionalComponent(c, context) } if (!isComponent(c)) { inst && unmountComponent(inst); if (!isSameNodeType(cbase, c)) { var d = cbase.nextSibling || null, parent = cbase.parentNode, realBase = createNodeToVNode(c); realBase._ancestor = cbase._ancestor; realBase._ancestorConstructor = cbase._ancestorConstructor; collectNode(cbase); removeOrphanedChildren(cbase.childNodes); cbase = parent.insertBefore(realBase, d); updateComponentBaseUp(a, cbase) } cbase._componentConstructor = a.constructor; cbase._component = a; diff(cbase, c) } else { var e = c && c.nodeName, childContext = a.getChildContext ? a.getChildContext() : context, childProps = getNodeProps(c); if (inst && inst.constructor === e) { setComponentProps(inst, childProps, be, childContext) } else { inst && unmountComponent(inst); inst = renderComponent(buildAndRenderComponent(cbase, c, childContext)); a._component = inst; inst._parentComponent = a } } if (isUpdate) { D(a, 'componentDidUpdate', previousProps, previousState, previousContext) } else { D(a, 'componentDidMount'); a._isMounted = true } } var f = a._renderCallbacks, fn; if (f) { while (fn = f.pop()) { fn.call(a) } } return a } var bi = [], itemsOffline = []; function rerender() { if (bi.length) { var a = bi, p; bi = itemsOffline; itemsOffline = a; while (p = itemsOffline.pop()) { if (p._dirty) { renderComponent(p) } } } } function enqueueRender(a) { if (bi.push(a) === 1) { (M.debounceRendering || O)(rerender) } } function triggerComponentRender(a) { if (!a._dirty) { a._dirty = true; enqueueRender(a) } } function buildAndRenderComponent(a, b, c) { var d = createComponent(b.nodeName, getNodeProps(b), c); d.base = a; return d } function innerDiffNode(a, b) { var c = a.childNodes.length, childrenLen = 0, keyedLen = 0, children = [], keyed = {}, key; if (c) { for (var d = 0; d < c; d++) { var e = a.childNodes[d]; key = e._component ? e._component.__key : W(e, 'key'); if (!E(key)) { keyed[key] = e; keyedLen++ } else { children[childrenLen++] = e } } } var f = b.children, vlen = f && f.length; if (vlen) { for (var i = 0; i < vlen; i++) { var g = f[i], child2 = null; if (keyedLen) { var h = g.attributes; key = h && h.key; if (!E(key) && hasOwnProperty(keyed, key)) { child2 = keyed[key]; delete keyed[key]; keyedLen-- } } if (!child2 && childrenLen) { for (var j = 0; j < childrenLen; j++) { if (isSameNodeType(children[j], g)) { child2 = children[j]; children.splice(j, 1); childrenLen--; break } } } if (!child2) { child2 = createNodeToVNode(g) } if (child2 !== a.childNodes[i]) { a.insertBefore(child2, a.childNodes[i] || null) } render(child2, g) } } if (keyedLen) { for (key in keyed) { children[childrenLen++] = keyed[key] } } if (childrenLen) { removeOrphanedChildren(children) } } function diff(a, b) { var c = b.attributes, parent = a.parentNode, next = a.nextSibling, out = a; if (q(b)) { var d = Q(a); if (d === 3) { a[J] = b } else if (d === 1) { out = document.createTextNode(b); recollectNodeTree(a); parent.insertBefore(out, next) } } else { var e = b.nodeName || 'undefined'; if (A(a.nodeName) !== e) { out = createNode(e); recollectNodeTree(a); parent.insertBefore(out, next) } innerDiffNode(out, b); diffAttributes(out, b); if (c && c.ref) { out[K].ref = c.ref; out[K].ref(out) } } } function render(a, b, c) { var d = a._ancestor; if (isFunctionalComponent(b)) { b = buildFunctionalComponent(b, c) } if (d && b.nodeName === d.constructor) { setComponentProps(d, getNodeProps(b), be, c) } else { if (d) { unmountComponent(d) } if (o(b.nodeName)) { var e = buildAndRenderComponent(a, b); a._ancestor = e; a._ancestorConstructor = e.constructor; renderComponent(e) } else { diff(a, b) } } } function Component(a, b) { this._dirty = this._disableRendering = this._isMounted = false; this._parentComponent = this._component = this.__ref = this.__key = this._linkedStates = null; this.prevState = this.prevProps = this.prevContext = this.base = null; this._renderCallbacks = []; this.context = b || {}; this.props = a; this.state = D(this, 'getInitialState') || {}; return this } Component.prototype.shouldComponentUpdate = function (a, b, c) { return true }; Component.prototype.linkState = function (a, b) { var c = this._linkedStates || (this._linkedStates = {}), cacheKey = a + '|' + (b || ''); return c[cacheKey] || (c[cacheKey] = createLinkedState(this, a, b)) }; Component.prototype.setState = function (a, b, c) { if (typeof b === 'boolean') { c = b; b = null } if (!this.prevState) { this.prevState = w(this.state) } if (b) { this._renderCallbacks.push(b) } a = o(a) ? a(this.state, this.props) : a; if (c) { this.state = a } else { u(this.state, a) } triggerComponentRender(this) }; Component.prototype.setProps = function (a, b, c) { if (typeof b === 'boolean') { c = b; b = null } if (b) { this._renderCallbacks.push(b) } a = o(a) ? a(this.state, this.props) : a; if (!c) { for (var i in this.props) { if (!hasOwnProperty(a, i)) { a = this.props[i] } } } setComponentProps(this, a) }; Component.prototype.isMounted = function () { return this._isMounted }; Component.prototype.getDOMNode = function () { return this.base }; Component.prototype.forceUpdate = function (a) { if (a) { this._renderCallbacks.push(a) } renderComponent(this) }; Component.prototype.render = function (a, b) { return null }; Component.prototype.clean = function () { this._dirty = this._disableRendering = this._isMounted = false; this._parentComponent = this._component = this.__ref = this.__key = null; this.prevState = this.prevProps = this.prevContext = this.base = null; this._renderCallbacks.length = 0; this._linkedStates && y(this._linkedStates) }; function createClass(a) { var b = String(Math.random() + Math.random()).replace(/\d\.\d{4}/, 'Component'), F = Function('Component', 'return function ' + b + '() { return Component.apply(this, arguments);};')(Component); F.maybeTag = 'div'; F.prototype = Object.create(Component.prototype); if (a.getDefaultProps) { F.defaultProps = a.getDefaultProps(); delete a.getDefaultProps } for (var i in a) { F.prototype[i] = a[i] } return F.prototype.constructor = F } return { h: h, hooks: M, render: render, rerender: rerender, Component: Component, createClass: createClass } })(window);
